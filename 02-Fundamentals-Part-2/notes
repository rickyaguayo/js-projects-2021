strict mode
- written at the top of js file. 'use strict';
- helps make the js cleaner and secure code
- helps devs avoid bugs
- forbids certain actions
- makes errors visible
- adds reserved words that will throw errors if you try to use them

Functions -
- input data -> transform data -> output data
- allows us to create reusable code 
- names and parameters optional
- can only be ran when called/ran/invoked. logger();
- return helps produce the result of the function so that it can be used elsewhere in the code. return is optional
- return causes you to jump out of function
- functions are values. can be stored in variables

- function declarations (script.js line 10) use function keyword to declare a function (like variables)
  - these can be called before the function is declared in the code (hoisting)

- function expression (script.js line 30) is a function value stored in a variable
  - this usually is an anonymous(without a name) function stored in a variable
  - cannot be called before the function in the code. (hoisting)

- arrow functions (script.js line 38)
  - short hand for function expressions
  - return is implicit in arrow functions. but if there is more than one line of code, you will need to put return
  - curly braces are optional depending on length of code block within function 
  - helpful for writing short one line functions. (dont need return here)
  - arrow functions do not get the this keyword.

Arrays (line 87)
- zero based.
- call items in array with []
- can mutate arrays within const variable
- can hold different kinds of data types
- can use function calls within array

- Methods - functions used to mutate arrays (line 117)
  - .push() - adds item to END of array. returns length of array. shorthand is friends[3]. assuming 3 would be the last index if once value is added
  - .unshift() - adds item to BEGINNING of array. returns length of array
  - .pop() - removes last item in array. returns item removed
  - .shift() - removes first item in array. returns item removed
  - .length() - calculates how many values inside of an array. not zero based
  - .indexOf() - returns the index of specified value. -1 is returned when value is not present in the array
  - .includes() - returns true or false. sees whether value is inside the array. uses strict equality operator